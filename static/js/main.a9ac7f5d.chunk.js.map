{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profile.module.css","components/Header/Header.jsx","components/Navbar/Navbar.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/Profile.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","classes","header","src","img","alt","Navbar","nav","item","Post","message","likesCount","MyPosts","name","cols","rows","posts","Profile","content","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,uB,sDCAnDD,EAAOC,QAAU,CAAC,KAAO,qB,gBCAzBD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,KAAO,wB,+KCU7CC,EARA,SAACC,GACf,OACC,4BAAQC,UAAWC,IAAQC,QAC1B,yBAAKC,IAAKJ,EAAMK,IAAKC,IAAI,W,gBCYbC,EAfA,WACd,OACC,yBAAKN,UAAWC,IAAQM,KACvB,4BACC,wBAAIP,UAAWC,IAAQO,MAAvB,WACA,wBAAIR,UAAWC,IAAQO,MAAvB,WACA,wBAAIR,UAAWC,IAAQO,MAAvB,gBACA,wBAAIR,UAAWC,IAAQO,MAAvB,QACA,wBAAIR,UAAWC,IAAQO,MAAvB,SACA,wBAAIR,UAAWC,IAAQO,MAAvB,e,gCCOWC,EAhBF,SAACV,GAEb,OACC,yBAAKC,UAAWC,IAAQO,MACvB,yBACCL,IAAI,kEACJE,IAAI,WAEJN,EAAMW,QACP,6BACC,6CAAeX,EAAMY,gBCOVC,EAhBC,WACf,OACC,6BACC,wCACA,6BACC,8BAAUC,KAAK,WAAWC,KAAK,KAAKC,KAAK,MACzC,6CAED,yBAAKf,UAAWC,IAAQe,OACvB,kBAAC,EAAD,CAAMN,QAAQ,mBAAoBC,WAAW,OAC7C,kBAAC,EAAD,CAAMD,QAAQ,qBAAqBC,WAAW,U,gBCEnCM,EAZC,WACf,OACC,yBAAKjB,UAAWC,IAAQiB,SACvB,gCACC,yBAAKf,IAAI,6EAEV,qDACA,kBAAC,EAAD,QCKYgB,EAVH,WACX,OACC,yBAAKnB,UAAU,eACd,kBAAC,EAAD,CAAQI,IAAI,wCACZ,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCiBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3B,c","file":"static/js/main.a9ac7f5d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2UZlG\",\"item\":\"Navbar_item__2zOV5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__MOCE5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__16Tqh\",\"item\":\"Profile_item__30R2c\"};","import React from \"react\";\r\nimport classes from \"./Header.module.css\"\r\n\r\nconst Header = (props) => {\r\n\treturn (\r\n\t\t<header className={classes.header}>\r\n\t\t\t<img src={props.img} alt=\"logo\" />\r\n\t\t</header>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport classes from \"./Navbar.module.css\";\r\n\r\nconst Navbar = () => {\r\n\treturn (\r\n\t\t<nav className={classes.nav}>\r\n\t\t\t<ul>\r\n\t\t\t\t<li className={classes.item}>Profile</li>\r\n\t\t\t\t<li className={classes.item}>Message</li>\r\n\t\t\t\t<li className={classes.item}>Main content</li>\r\n\t\t\t\t<li className={classes.item}>News</li>\r\n\t\t\t\t<li className={classes.item}>Music</li>\r\n\t\t\t\t<li className={classes.item}>Settings</li>\r\n\t\t\t</ul>\r\n\t\t</nav>\r\n\t);\r\n};\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport classes from \"./Post.module.css\";\r\n\r\nconst Post = (props) => {\r\n\r\n\treturn (\r\n\t\t<div className={classes.item}>\r\n\t\t\t<img\r\n\t\t\t\tsrc=\"https://www.paulseward.com/downloads/Avatars/cartoon_avatar.png\"\r\n\t\t\t\talt=\"avatar\"\r\n\t\t\t/>\r\n\t\t\t{props.message}\r\n\t\t\t<div>\r\n\t\t\t\t<span>{`Like ${props.likesCount}`}</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Post;","import React from \"react\";\r\nimport classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\n\r\nconst MyPosts = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div>My post</div>\r\n\t\t\t<div>\r\n\t\t\t\t<textarea name=\"new-post\" cols=\"30\" rows=\"5\"></textarea>\r\n\t\t\t\t<button>Add post</button>\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.posts}>\r\n\t\t\t\t<Post message=\"Hi, how are you?\"  likesCount=\"20\"/>\r\n\t\t\t\t<Post message=\"It's my first post\" likesCount=\"30\"/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default MyPosts;\r\n","import React from \"react\";\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport classes from \"./Profile.module.css\";\r\n\r\nconst Profile = () => {\r\n\treturn (\r\n\t\t<div className={classes.content}>\r\n\t\t\t<figure>\r\n\t\t\t\t<img src=\"https://wowslider.net/local-sliders/demo-10/data1/images/road220058.jpg\"/>\r\n\t\t\t</figure>\r\n\t\t\t<div>avatar + description</div>\r\n\t\t\t<MyPosts />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header/Header\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Profile from \"./components/Profile/Profile\";\n\nconst App = () => {\n\treturn (\n\t\t<div className=\"app-wrapper\">\n\t\t\t<Header img=\"https://bower.io/img/bower-logo.png\"/>\n\t\t\t<Navbar />\n\t\t\t<Profile />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}